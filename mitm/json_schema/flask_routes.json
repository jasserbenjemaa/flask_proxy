{
    "/users": {
        "methods": [
            "POST",
            "GET"
        ],
        "function": "create_user",
        "code": "def create_user():\n    time.sleep(4)\n    try:\n        data = request.get_json()\n        \n        if not data or 'name' not in data or 'email' not in data:\n            return jsonify({'error': 'Name and email are required'}), 400\n        \n        # Prepare user data\n        user_data = {\n            'id': str(uuid.uuid4()),\n            'name': data['name'],\n            'email': data['email'],\n            'age': data.get('age'),\n            'created_at': datetime.now().isoformat(),\n            'updated_at': datetime.now().isoformat()\n        }\n        \n        # Insert into Supabase\n        response = supabase.table(USERS_TABLE).insert(user_data).execute()\n        result = handle_supabase_response(response)\n        \n        return jsonify(result[0] if result else user_data), 201\n    \n    except Exception as e:\n        error_msg = str(e)\n        # Handle unique constraint violation (duplicate email)\n        if 'duplicate key value' in error_msg or 'unique constraint' in error_msg:\n            return jsonify({'error': 'Email already exists'}), 409\n        return jsonify({'error': error_msg}), 500",
        "file": "./backend/app.py"
    },
    "/users/<user_id>": {
        "methods": [
            "GET",
            "PUT",
            "PATCH",
            "DELETE"
        ],
        "function": "get_user",
        "code": "def get_user(user_id):\n    try:\n        response = supabase.table(USERS_TABLE).select(\"*\").eq('id', user_id).execute()\n        result = handle_supabase_response(response)\n        \n        if not result:\n            return jsonify({'error': 'User not found'}), 404\n        \n        return jsonify(result[0]), 200\n    \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500",
        "file": "./backend/app.py"
    },
    "/users/search": {
        "methods": [
            "GET"
        ],
        "function": "search_users",
        "code": "def search_users():\n    try:\n        email = request.args.get('email')\n        name = request.args.get('name')\n        \n        if not email and not name:\n            return jsonify({'error': 'Email or name parameter required'}), 400\n        \n        query = supabase.table(USERS_TABLE).select(\"*\")\n        \n        if email:\n            query = query.ilike('email', f'%{email}%')\n        if name:\n            query = query.ilike('name', f'%{name}%')\n        \n        response = query.execute()\n        result = handle_supabase_response(response)\n        \n        return jsonify(result), 200\n    \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500",
        "file": "./backend/app.py"
    },
    "/health": {
        "methods": [
            "GET"
        ],
        "function": "health_check",
        "code": "def health_check():\n    try:\n        # Test connection by counting users\n        response = supabase.table(USERS_TABLE).select(\"*\", count=\"exact\").execute()\n        count = response.count if hasattr(response, 'count') else 0\n        \n        return jsonify({\n            'status': 'healthy',\n            'database': 'connected',\n            'total_users': count,\n            'timestamp': datetime.now().isoformat()\n        }), 200\n    \n    except Exception as e:\n        return jsonify({\n            'status': 'unhealthy',\n            'database': 'disconnected',\n            'error': str(e),\n            'timestamp': datetime.now().isoformat()\n        }), 503",
        "file": "./backend/app.py"
    },
    "/users/bulk": {
        "methods": [
            "POST"
        ],
        "function": "create_bulk_users",
        "code": "def create_bulk_users():\n    try:\n        data = request.get_json()\n        \n        if not data or 'users' not in data or not isinstance(data['users'], list):\n            return jsonify({'error': 'Users array is required'}), 400\n        \n        users_data = []\n        for user in data['users']:\n            if 'name' not in user or 'email' not in user:\n                return jsonify({'error': 'Each user must have name and email'}), 400\n            \n            user_data = {\n                'id': str(uuid.uuid4()),\n                'name': user['name'],\n                'email': user['email'],\n                'age': user.get('age'),\n                'created_at': datetime.now().isoformat(),\n                'updated_at': datetime.now().isoformat()\n            }\n            users_data.append(user_data)\n        \n        # Insert bulk data\n        response = supabase.table(USERS_TABLE).insert(users_data).execute()\n        result = handle_supabase_response(response)\n        \n        return jsonify({\n            'message': f'{len(result)} users created successfully',\n            'users': result\n        }), 201\n    \n    except Exception as e:\n        error_msg = str(e)\n        if 'duplicate key value' in error_msg or 'unique constraint' in error_msg:\n            return jsonify({'error': 'One or more emails already exist'}), 409\n        return jsonify({'error': error_msg}), 500",
        "file": "./backend/app.py"
    }
}