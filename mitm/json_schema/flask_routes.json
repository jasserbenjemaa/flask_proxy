{
    "/receive": {
        "methods": [
            "POST"
        ],
        "function": "receive_json",
        "code": "def receive_json():\n    try:\n        data = request.get_json()\n        return jsonify({\"second_name\":data['name'][\"second_name\"],\"name_first\":data['name'][\"first_name\"],\"message\":data[\"message\"],\"source\":data[\"source\"],\"age\":data[\"age\"]})\n    except Exception as e:\n        error_trace = traceback.format_exc()\n        return jsonify({\"traceback\":error_trace}), 400",
        "file": "./backend/app.py"
    },
    "/add": {
        "methods": [
            "POST"
        ],
        "function": "handle_complex_json",
        "code": "def handle_complex_json():\n    try:\n        data = request.get_json(force=True)\n\n        # Validate presence of top-level keys\n        required_keys = ['user', 'preferences', 'history']\n        for key in required_keys:\n            if key not in data:\n                return jsonify({\"error\": f\"Missing key: '{key}'\"}), 400\n\n        # Validate 'user' object\n        user = data['user']\n        if not isinstance(user.get('id'), int):\n            return jsonify({\"error\": \"User ID must be an integer\"}), 400\n        if not isinstance(user.get('name'), dict):\n            return jsonify({\"error\": \"User name must be a dictionary with 'first' and 'last'\"}), 400\n\n        # Validate name structure\n        name = user['name']\n        if 'first' not in name or 'last' not in name:\n            return jsonify({\"error\": \"Missing 'first' or 'last' in user name\"}), 400\n\n        # Validate preferences\n        preferences = data['preferences']\n        if 'notifications' not in preferences or not isinstance(preferences['notifications'], bool):\n            return jsonify({\"error\": \"'notifications' must be a boolean in preferences\"}), 400\n\n        # Validate history (list of past actions)\n        history = data['history']\n        if not isinstance(history, list):\n            return jsonify({\"error\": \"'history' must be a list\"}), 400\n\n        for idx, item in enumerate(history):\n            if 'timestamp' not in item or 'action' not in item:\n                return jsonify({\"error\": f\"Missing 'timestamp' or 'action' in history item {idx}\"}), 400\n\n        # Optional section: settings\n        settings = data.get('settings', {})\n        theme = settings.get('theme', 'light')\n\n        return jsonify({\n            \"message\": \"JSON received and validated\",\n            \"user_id\": user['id'],\n            \"user_name\": f\"{name['first']} {name['last']}\",\n            \"notifications_enabled\": preferences['notifications'],\n            \"history_count\": len(history),\n            \"theme\": theme\n        })\n\n    except Exception:\n        return jsonify({\"traceback\": traceback.format_exc()}), 500",
        "file": "./backend/app.py"
    },
    "/": {
        "methods": [
            "GET"
        ],
        "function": "index",
        "code": "def index():\n    return render_template('index.html')",
        "file": "./backend/app.py"
    },
    "/submit": {
        "methods": [
            "POST"
        ],
        "function": "submit_form",
        "code": "def submit_form():\n    logger.info(\"Received a POST request to /submit\")\n    try:\n        data = request.form\n        name = data[\"name\"]\n        email = data.get('email')\n        message = data.get('message')\n        \n\n        logger.info(f\"Received form submission - Name: {name}, Email: {email} message:{message}\")\n\n        # Process the form data here\n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"Form submitted successfully\"\n        }), 200\n    except Exception as e:\n        error_trace = traceback.format_exc()\n        logger.info(f\"backend error: {error_trace}\")\n        logger.error(f\"Error processing form: {str(e)}\")\n        return jsonify({\n            \"status\": \"error\",\n            \"message\": \"An error occurred while processing the form\",\n            \"traceback\":error_trace\n        }), 500",
        "file": "./backend/app.py"
    }
}